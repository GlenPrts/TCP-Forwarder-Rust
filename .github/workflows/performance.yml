# Performance Monitoring
#
# 本工作流自动化性能监控、基准测试、负载测试、内存分析、安全基准测试，并生成性能报告。
# 支持主分支、PR、手动触发和定时触发（可解注释 schedule）。

name: Performance Monitoring

on:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  # schedule:
  #   - cron: '0 6 * * *' # 每天 UTC 06:00 运行性能监控
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # 1. 性能基准测试
  benchmark:
    name: 性能基准测试
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable

      - name: 缓存 Cargo 依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            tcp-forwarder/target
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

      - name: 安装系统依赖
        run: sudo apt-get update && sudo apt-get install -y build-essential

      - name: 运行单元测试基准
        run: |
          cd tcp-forwarder
          # 运行基准测试（如有）
          cargo test --release --tests -- --nocapture

      - name: 内存使用分析
        run: |
          cd tcp-forwarder
          cargo build --release
          if command -v valgrind &> /dev/null; then
            echo "Running memory analysis..."
            # valgrind --tool=massif --detailed-freq=1 --max-snapshots=100 ./target/release/tcp-forwarder --help
          fi

      - name: 二进制大小分析
        run: |
          cd tcp-forwarder
          cargo build --release
          echo "=== 二进制文件大小分析 ==="
          ls -lh target/release/tcp-forwarder
          strip target/release/tcp-forwarder
          echo "After strip:"
          ls -lh target/release/tcp-forwarder
          if command -v bloaty &> /dev/null; then
            bloaty target/release/tcp-forwarder
          fi

  # 2. 负载测试
  load-test:
    name: 负载测试
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable

      - name: 构建应用
        run: cd tcp-forwarder && cargo build --release

      - name: 安装负载测试工具
        run: sudo apt-get update && sudo apt-get install -y wrk apache2-utils

      - name: 启动 TCP forwarder
        run: |
          cd tcp-forwarder
          # 创建测试配置
          cat > test_config.yaml << 'EOF'
          proxy:
            dial_timeout: 5s
            idle_timeout: 30s
            
          pools:
            default:
              health_check: true
              health_check_interval: 10s
              max_retries: 3
              weight: 1.0
              endpoints:
                - "127.0.0.1:8080"
          
          server:
            bind: "127.0.0.1:3000"
            
          metrics:
            enabled: true
            bind: "127.0.0.1:9090"
            
          scoring:
            algorithm: "ewma"
            ewma:
              alpha: 0.1
              max_score: 1000.0
              min_score: 1.0
              window_size: 10
          EOF
          ./target/release/tcp-forwarder --config test_config.yaml &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          sleep 5

      - name: 启动模拟后端
        run: |
          python3 -m http.server 8080 &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          sleep 2

      - name: 运行负载测试
        run: |
          echo "=== 负载测试开始 ==="
          if nc -z 127.0.0.1 3000; then
            echo "✅ TCP forwarder正在运行"
          else
            echo "❌ TCP forwarder未启动"
            exit 1
          fi
          ab -n 1000 -c 10 http://127.0.0.1:3000/ || echo "负载测试完成"
          if command -v wrk &> /dev/null; then
            wrk -t4 -c10 -d30s http://127.0.0.1:3000/ || echo "wrk测试完成"
          fi

      - name: 收集性能指标
        run: |
          if curl -s http://127.0.0.1:9090/metrics > metrics.txt; then
            echo "✅ 成功收集Prometheus指标"
            grep -E "(tcp_forwarder|connections|requests)" metrics.txt || echo "指标收集完成"
          else
            echo "❌ 无法收集Prometheus指标"
          fi

      - name: 清理进程
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then kill $APP_PID || true; fi
          if [ ! -z "$BACKEND_PID" ]; then kill $BACKEND_PID || true; fi

  # 3. 内存分析
  memory-profiling:
    name: 内存分析
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable

      - name: 安装分析工具
        run: sudo apt-get update && sudo apt-get install -y valgrind heaptrack

      - name: 构建带调试符号的版本
        run: cd tcp-forwarder && cargo build --release

      - name: 内存泄漏检测
        run: |
          cd tcp-forwarder
          echo "=== 内存泄漏检测 ==="
          timeout 30s valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./target/release/tcp-forwarder --help || echo "内存检测完成"

  # 4. 安全基准测试
  security-benchmark:
    name: 安全基准测试
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 构建应用
        run: cd tcp-forwarder && cargo build --release

      - name: 网络安全测试
        run: |
          sudo apt-get update && sudo apt-get install -y nmap netcat-openbsd
          cd tcp-forwarder
          cat > security_test_config.yaml << 'EOF'
          proxy:
            dial_timeout: 5s
            idle_timeout: 30s
            
          pools:
            default:
              health_check: false
              endpoints:
                - "127.0.0.1:8080"
          
          server:
            bind: "127.0.0.1:3001"
          EOF
          ./target/release/tcp-forwarder --config security_test_config.yaml &
          APP_PID=$!
          sleep 3
          if command -v nmap &> /dev/null; then
            nmap -p 3001 127.0.0.1 || echo "端口扫描完成"
          fi
          nc -z 127.0.0.1 3001 && echo "✅ 端口可访问" || echo "❌ 端口不可访问"
          kill $APP_PID || true

  # 5. 性能报告生成
  performance-report:
    name: 性能报告生成
    runs-on: ubuntu-latest
    needs: [benchmark, load-test, memory-profiling]
    if: always()
    steps:
      - name: 生成性能报告
        run: |
          echo "=== 性能测试报告 ==="
          echo "基准测试状态: ${{ needs.benchmark.result }}"
          echo "负载测试状态: ${{ needs.load-test.result }}"
          echo "内存分析状态: ${{ needs.memory-profiling.result }}"
          cat > performance_report.md << 'EOF'
          # 🚀 性能测试报告
          
          ## 📊 测试结果概览
          
          | 测试类型 | 状态 | 说明 |
          |---------|------|------|
          | 基准测试 | ${{ needs.benchmark.result }} | 代码性能基准测试 |
          | 负载测试 | ${{ needs.load-test.result }} | 高并发负载测试 |
          | 内存分析 | ${{ needs.memory-profiling.result }} | 内存使用和泄漏检测 |
          
          ## 🔍 详细分析
          
          ### 性能指标
          - **编译时间**: 待测量
          - **二进制大小**: 待测量
          - **内存使用**: 待测量
          - **并发性能**: 待测量
          
          ### 优化建议
          - 根据测试结果提供具体的优化建议
          - 识别性能瓶颈和改进点
          
          ---
          报告生成时间: $(date)
          EOF
          echo "性能报告已生成"

      - name: 上传性能报告
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance_report.md
