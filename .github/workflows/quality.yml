# Code Quality & Security
#
# 本工作流自动化代码质量、文档、安全、合规、性能、供应链安全等检查，保障主分支和开发分支的稳定性。
#
# 支持手动触发、定时触发、push/pull_request 事件。

name: Code Quality & Security

on:
  # push:
  #   branches: [ main, develop ]
  # pull_request:
  #   branches: [ main, develop ]
  workflow_dispatch:
  # schedule:
  #   - cron: '0 2 * * *' # 每天 UTC 02:00 运行全面扫描

env:
  CARGO_TERM_COLOR: always

jobs:
  # 1. 代码质量分析
  code-quality:
    name: 代码质量分析
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: 缓存 Cargo 依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            tcp-forwarder/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 格式检查
        run: cd tcp-forwarder && cargo fmt --all -- --check

      - name: Clippy 静态分析
        run: cd tcp-forwarder && cargo clippy --all-targets --all-features -- -D warnings

      - name: 文档检查
        run: cd tcp-forwarder && cargo doc --no-deps --document-private-items

  # 2. 安全审计
  security-audit:
    name: 安全审计
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable

      - name: 安装 cargo-audit
        run: cargo install cargo-audit

      - name: 运行安全审计
        run: cd tcp-forwarder && cargo audit

      - name: 安装 cargo-deny
        run: cargo install cargo-deny

      - name: 运行 cargo-deny
        run: cd tcp-forwarder && cargo deny check

  # 3. 许可证合规检查
  license-check:
    name: 许可证合规检查
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable

      - name: 安装 cargo-license
        run: cargo install cargo-license

      - name: 检查依赖许可证
        run: cd tcp-forwarder && cargo license --json > licenses.json
      
      - name: 上传许可证报告
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: tcp-forwarder/licenses.json

  # 4. CodeQL 静态安全分析
  codeql-analysis:
    name: CodeQL 静态安全分析
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 初始化 CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'rust'
          queries: security-and-quality

      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable

      - name: 构建项目
        run: cd tcp-forwarder && cargo build --release

      - name: 执行 CodeQL 分析
        uses: github/codeql-action/analyze@v3

  # 5. 漏洞扫描（Trivy）
  vulnerability-scan:
    name: 漏洞扫描
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 运行 Trivy 漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 上传 Trivy 扫描结果到 GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 6. 性能分析（可选）
  performance-analysis:
    name: 性能分析
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable

      - name: 安装 criterion
        run: cd tcp-forwarder && echo "如需性能测试请添加 criterion 依赖"

      - name: 运行基准测试
        run: cd tcp-forwarder && echo "性能测试配置待完善"

  # 7. 供应链安全（SLSA provenance）
  supply-chain-security:
    name: 供应链安全
    permissions:
      id-token: write
      contents: write
      actions: read
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.10.0
    with:
      base64-subjects: "" # 示例值，请根据实际构建产物修改
      provenance-name: "tcp-forwarder-provenance.intoto.jsonl"

  # 8. 质量门禁（统一汇总所有质量与安全检查结果）
  quality-gate:
    name: 质量门禁
    runs-on: ubuntu-latest
    needs: [code-quality, security-audit, license-check, codeql-analysis, vulnerability-scan, supply-chain-security]
    if: always()
    steps:
      - name: 检查质量门禁
        run: |
          echo "=== 质量门禁检查 ==="
          code_quality="${{ needs.code-quality.result }}"
          security_audit="${{ needs.security-audit.result }}"
          license_check="${{ needs.license-check.result }}"
          codeql_analysis="${{ needs.codeql-analysis.result }}"
          vulnerability_scan="${{ needs.vulnerability-scan.result }}"
          supply_chain_security="${{ needs.supply-chain-security.result }}"
          echo "代码质量检查: $code_quality"
          echo "安全审计: $security_audit"
          echo "许可证合规: $license_check"
          echo "CodeQL 分析: $codeql_analysis"
          echo "漏洞扫描: $vulnerability_scan"
          echo "供应链安全: $supply_chain_security"
          # 关键检查失败则直接失败
          if [[ "$code_quality" != "success" || "$security_audit" != "success" || "$license_check" != "success" || "$codeql_analysis" != "success" || "$supply_chain_security" != "success" ]]; then
            echo "❌ 质量门禁检查失败"
            exit 1
          fi
          if [[ "$vulnerability_scan" != "success" ]]; then
            echo "⚠️  漏洞扫描检查失败，请查看安全报告"
            # 可选：是否因漏洞扫描失败阻止部署
            # exit 1
          fi
          echo "✅ 质量门禁检查通过"

      - name: PR 失败时评论
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ❌ 质量门禁检查失败\n\n代码质量或安全检查未通过，请检查失败的作业日志。\n\n请修复相关问题后重新提交。`
            })

      - name: PR 通过时评论
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ✅ 质量门禁检查通过\n\n所有代码质量和安全检查均已通过！该PR可以安全合并。`
            })
